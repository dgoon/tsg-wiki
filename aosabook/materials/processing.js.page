# Processing.js

## 번역

(을 시도해 봅니다...)

Originally developed by Ben Fry and Casey Reas, the Processing programming language started as an open source programming language (based on Java) to help the electronic arts and visual design communities learn the basics of computer programming in a visual context. Offering a highly simplified model for 2D and 3D graphics compared to most programming languages, it quickly became well-suited for a wide range of activities, from teaching programming through writing small visualisations to creating multi-wall art installations, and became able to perform a wide variety of tasks, from simply reading in a sequence of strings to acting as the de facto IDE for programming and operating the popular "Arduino" open source hardware prototyping boards. Continuing to gain popularity, Processing has firmly taken its place as an easy to learn, widely used programming language for all things visual, and so much more.

원래 Ben Fry와 Casey Reas에 의해 개발된 프로세싱 프로그래밍 언어는 일렉트로닉 아트와 비쥬얼 디자인 커뮤니티가 비쥬얼 컨텍스트 내에서 기본적인 컴퓨터 프로그래밍을 배우는 것을 돕기 위한 (자바 기반의) 오픈 소스 프로그래밍 언어로 시작되었다. 대부분의 프로그래밍 언어들과 비교되는 2D와 3D 그래픽스를 위한 매우 단순화된 모델을 제공한 것은, 그것이 광범위한 활동(작은 비쥬얼라이제이션을 작성하는 것을 통해 프로그래밍을 가르치는 것 부터 multi-wall art installations을 창조하는 것까지)을 위해 빠르게 잘 적용되었고, 다양한 여러가지 작업(간단히 문자열들의 배열를 읽는 것에서 부터 대중적인 아두이노 오픈 소스 하드웨어 프로토타이핑 보드를 프로그래밍하고 구동하기 위한 거의 표준의 IDE로써 동작하는 것까지)을 수행할 수 있게 되었다. 계속 인기를 얻고 있는 프로세싱은 배우기 쉽고, 모든 보여지는 것과 그 이상의 것을 위한 널리 사용되는 프로그래밍 언어로써 그 자리를 확고히 하고 있다.

The basic Processing program, called a "sketch", consists of two functions: setup and draw. The first is the main program entry point, and can contain any amount of initialization instructions. After finishing setup, Processing programs can do one of two things: 1) call draw, and schedule another call to draw at a fixed interval upon completion; or 2) call draw, and wait for input events from the user. By default, Processing does the former; calling noLoop results in the latter. This allows for two modes to present sketches, namely a fixed framerate graphical environment, and an interactive, event-based updating graphical environment. In both cases, user events are monitored and can be handled either in their own event handlers, or for certain events that set persistent global values, directly in the draw function.

스케치(sketch)라고 불리는 기본적인 프로세싱 프로그램은 두개의 함수로 구성되어 있다: `setup`과 `draw`. 첫번째는 주 프로그램의 엔트리 포인트로, 초기화 명령의 상당량을 포함할 수 있다. `setup`이 끝난 후, 프로세싱 프로그램은 두가지 중 하나를 할 수 있다: 1) `draw`를 호출하고 완료될 때까지 고정된 간격으로 그려주기 위해 하기 위해 다른 호출을 예정하는 것 또는 2)`draw`를 호출하고 사용자로 부터 입력을 대기하는 것. By default, Processing does the former; calling noLoop results in the latter. 이것은 스케치를 표시하는데 두 가지 모드를 허용하는데, 다시 말하면 고정된 프레임레이트의 그래픽 환경과 상호적이고, 이벤트에 기반하여 업데이트되는 그래픽 환경이다. 두 경우 모두, 사용자 이벤트는 감시되고, 그들 자신의 이벤트 처리기나 `draw` 함수에 직접적으로 persistent global values에 설정된 특정 이벤트로 처리될 수 있다.

Processing.js is a sister project of Processing, designed to bring it to the web without the need for Java or plugins. It started as an attempt by John Resig to see if the Processing language could be ported to the web, by using the—at the time brand new—HTML5 `<canvas>` element as a graphical context, with a proof of concept library released to the public in 2008. Written with the idea in mind that "your code should just work", Processing.js has been refined over the years to make data visualisations, digital art, interactive animations, educational graphs, video games, etc. work using web standards and without any plugins. You write code using the Processing language, either in the Processing IDE or your favourite editor of choice, include it on a web page using a `<canvas>` element, and Processing.js does the rest, rendering everything in the `<canvas>` element and letting users interact with the graphics in the same way they would with a normal standalone Processing program.

Processing.js는 Java 또는 플러그인의 필요 없이 웹에 Processing을 가져오기 위해 설계된 Processing의 자매 프로젝트이다. ...



## Links

(일단 링크 수집...)

* [aosabook 본문 링크](http://www.aosabook.org/en/pjs.html)
* [processing.js 공식 사이트](http://processingjs.org)
* [processing.js repository (github)](https://github.com/processing-js/processing-js)