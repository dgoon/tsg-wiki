일단 그냥 막 번역부터 시작.
하다보면 가닥이 잡히겠지 ^^;;

# Twisted
 Twisted 는 python기반의 event-driven networking engine이다.언어를 불문하고, 네트워크 게임 제작자들이 그들의 목적에 사용 할 확장성 및 이식성을 갖춘 라이브러리가 별로 없던 2000년대 초반에 탄생했다.Twisted 제작자들은 현존하는 네트워크 환경에서 게임 개발을 시도하며 고생하다보니 확장성 및 이식성을 갖춘 event-driven networking framework의 필요성을 명확히 보았고, 과거 게임과 네트워크 어플리케이션 제작자의 실수와 힘들었던 점을 공부하여 하나 만들어보기로 결정했다.

Twisted는 TCP, UDP, SSL/TLS, HTTP, IMAP, SSH, IRC, FTP와 같은 다양한 transport, application layer의 protocols를 지원한다. 이것을 제작한 언어와 비슷하게 이것은 "batteries-included"이다. 즉, Twisted는 모든 protocol에 대한 server와 client 및 command line을 이용하여 쉽게 설정하고 배포할수 있게 도와주는 utilities를 포함하고 있다.

## Why Twisted?
2000년에 Twisted의 제작자 glyph는 Twisted Reality라는 text-based multiplayer game의 작업을 진행중이었다. 이것은 연결당 3개의 스레드가 실행되는 많은 스레드를 가진 JAVA구현이었다. 하나는 would block이 발생하는 read를 사용하는 입력을 담당하고, 다른 하나는 특별한 종류의 write에만 would block이 발생하는 출력을 담당하며, 마지막 하나는 타이머의 종료나 큐의 이벤트를 대기하는 스레드이다. 사용자들이 가상 세계를 이동하고 상호작용하면 스레드는 데드락이 걸리고, 캐시는 깨졌으며 동기화 로직은 제대로 작동하지 않았다. 즉, 스레드의 사용은 소프트웨어를 복잡하고, 버그가 많고 확장을 어렵게 만든것이다.

그는 대안을 찾던중 python을 발견했고 socket과 pips같은 stream object로 부터의 multiplexing I/O를 위한 "select" 모듈을 찾아냈다 (The Single UNIX Specification, Version 3 (SUSv3)에 select API의 설명이 있다). 동시에 JAVA는 select interface또는 비동기 I/O기능이 없었다 (J2SE 1.4의 java.nio는 2002년에 릴리즈). Python의 "select" 모듈을 사용해 제작한 게임의 프로토타입은 스레드 버전에 비해 덜 복잡하고 더욱 신뢰성있었다.

glyph은 즉시 python의 select와 event-driven programming으로 전환하여 게임의 서버와 클라이언트를 python의 select로 구현하였다. 하지만 그는 더 많은 일을 하고싶었다. 근본적으로, 그는 네트워크 활동을 게임내의 오브젝트에 대한 메소드 호출로 바꾸기를 바랬다. Nethack mailer daemon과 유사하게, 게임 내에서 이메일을 받을 수 있다면 어떨까? 게임의 모든 사용자가 홈페이지를 가지면 어떨까? Glyph은 그 자신이 python의 select를 사용한 좋은 IMAP과 HTTP 클라이언트 및 서버가 필요하다는 것을 발견했다.

그는 처음엔 Medusa를 고려했다. Medusa는 90년대 중반에 개발된 플랫폼으로 python의 asyncore 모듈을 이용한 네트워킹 서버 개발을 목적으로 한다. asyncore는 비동기 소켓 핸들러로써 OS의 select API위에서 dispatcher와 callback interface를 구성한다.

이것은 glyph에게 영감을 주는 발견이었지만 Medusa는 두 가지의 단점이 있었다.

1. Glyph가 Twisted Reality의 작업을 시작하던 2001년부터 유지보수가 되지 않았었다.
2. asyncore는 socket을 감싸는 wrapper였기때문에 애플리케이션 프로그래머는 여전히 socket을 직접 조작해야 했다. 이는 이식성이 여전히 프로그래머의 몫으로 남아있음을 의미했다. 더욱이 그 당시 asyncore의 windows 지원은 버그가 많았고 glyph는 그가 windows의 GUI client를 원하게 될것이라는 것을 알고 있었다.

Glyph는 그 자신이 networking platform을 구현할 가능성에 직면했고, Twisted Reality가 그의 게임과 같이 흥미로운 문제의 문을 열었다는 것을 실감했다.

시간이 지나, Twisted Reality game은 Twisted networking platform이 되었고 이것은 현존하는 python의 network platforms가 하지 못하는 일을 할 수 있다.

* Multi-threaded programming대신에 event-driven programming을 사용한다.
* 이식성 : 주요 OS가 제공하는 event notification system에대해 단일한 인터페이스 제공.
* "batteries-included" : 외부와 통신하는 유명한 application-layer protocols의 구현을 제공하여 Twisted를 개발자에게 바로 사용할수 있게 한다.
* RFC를 준수하고, 견고한 test suit와 함께 적합성을 제공한다.
* 하나 이상의 networking protocols를 쉽게  함께 사용할수 있도록 한다.
* 확장성이 있다.

## The Architecture of Twisted
Twisted는 event-driven networking engine이다. Event-driven programming은 Twisted의 디자인 철학에 통합되어 있다. 잠깐 event-driven programming의 의미를 정확히 알아보자.

Event-driven programming은 program flow가 external event에 의해 정의되는 programming paradigm이다. 이것의 개성은 이벤트 루프와 이벤트 발생 시 실행되는 callbacks로 나타난다. 두개의 다른 공통 programming paradigm들은 (single-threaded) synchronous 과 multi-threaded programming이다.

예제를 통해 single threaded, multi-threaded, event-driven programming models를 비교 해 보자. 그림 1은 이 세가지 모델에서 시간의 흐름에 따른 작업 완료를 보여준다.   program은 완료해야하는 세 개의 작업이 있고 각 작업은 I/O의 완료를 기다리기 위해 블록된다. I/O의 완료를 대기하는 시간은 회색으로 표시된다.

![그림 1 Threading models](http://www.aosabook.org/images/twisted/threading_models.png)

Single-threaded synchronous 버전의 프로그램은 작업이 순서대로 실행된다. 만약 하나의 작업이 I/O동안 블록된다면 모든 나머지 작업들은 그것이 끝나고 그들의 차례가 될 때 까지 기다려야 한다. 이 결정론적인 순서와 순차 작업은 이해하기 쉽지만 각각의 프로그램에 의존성이 없는 경우, 각 프로그램은 다른 프로그램을 기다려야 하기 때문에 불필요하게 느려진다.

Threaded버전의 프로그램은 진행 중 블록되는 세 작업을 각각의 스레드에서 제어한다. 이 스레드들은 OS가 관리하며 multiple processors 환경에서는 동시에 실행되지만 single processor환경에서는 교대로 실행된다. 이것은 다른 스레드가 블록된 상태에도 일부 스레드들은 작동할수 있게 한다. 이것은 종종 유사한 synchronous program보다 시간 효율적이지만 여러 스레드에서 동시에 접근할 수 있는 공유자원의 보호를 위한 코드를 추가해야한다. Multi-threaded programs는 좀 더 이해하기 어려워지는데 이는 프로세스 직렬화(잠금), 재진입, 스레드 지역 저장소 등 구현이 올바르지 않을 경우 찾기 어렵고 골치아픈 버그를 만들어내는 메커니즘들에 대해 고민해야 하기 때문이다.

Event-driven버전의 프로그램은 세 작업을 교대로 실행하지만 single thread에서 제어한다. I/O나 고 비용의 작업을 실행할 때, callback이 event loop에 등록되고, I/O가 완료될 동안 실행은 계속된다. callback은 작업이 완료되었을 때 수행할 작업을 설명한다. event loop는 event를 대기하고 event가 도착하면 이에 대해 대기중인 callback을 실행한다. 이것은 스레드의 도움없이 가능할 때 실행을 계속할 수 있도록 해 준다. Event-driven프로그램은 프로그래머가 thread safety에 대해 걱정할 필요가 없기 때문에 multi-threaded 프로그램보다 이해하기 쉽다.

다음과 같을때 event-driven model은 좋은 선택이다:

1. 많은 작업들. 그것들이....
2. 독립적이고....(서로 통신하거나 대기할 필요가 없다는 말)
3. 이 중 어떤것들은 이벤트를 대기하는 동안 블록될때.

동기화의 필요가 없기때문에 어플리케이션이 작업간에 변경가능한 데이터를 공유할때 좋은 선택이다.

네트워킹 어플리케이션은 종종 정확히 이러한 특징을 가지기 때문에 event-driven model에 딱 맞다.

### Reusing Existing Applications
Twisted가 만들어졌을때 이미 network protocols를 위해 많은 유명한 clients와 servers가 있었다. 왜 glyph는 Apache, IRCd, BIND, OpenSSH등 이미 존재하는 어플리케이션과 이것들의 client, server를 사용하지 않고 Twisted를 위해 처음부터 개발했을까?

이 server들은 일반적으로 C로 처음부터 구현된 networking code를 가지고 있었고 어플리케이션의 코드가 networking layer와 직접 연결되어있는 문제가 있었다. 이러한 문제로 인해 이것들을 라이브러리로 사용하기 힘들게 한다. 이들을 동시에 사용할 때 블랙박스로 다루어야만 하며, 개발자가 같은 데이터를 다중의 프로토콜에 전송하고자 할 때 코드를 재사용할 방법을 제공하지 않는다. 이에 더해 server와 client구현은 종종 코드를 공유하지 않는 분리된 어플리케이션이다. 이 어플리케이션들을 확장하고 다양한 환경에서 client-server 호환성을 관리하는 것은 이것들의 필요성보다 더 어려운일이다.

Twisted에 있는 client와 server는 일관된 interface를 사용하는 python으로 쓰여졌다. 이는 clients와 servers의 코드 공유, protocol간의 application logic 공유, test 코드등을 통해 새로운 clients와 servers를 제작하기 쉽게 해준다.

### The Reactor
Twisted는 reactor design pattern을 구현한다. 이것은 single-threaded 환경에서 다양한 소스에서 발생하는 이벤트를 demultiplexing 하고  그에 맞는 핸들러를 dispatch하는 구조에 대한 설명이다.

Twisted의 핵심은 reactor event loop이다. reactor는 network, filesystem, timer events에 대해 알고 있다. 이것은 이벤트를 기다리고 처리한다. 플랫폼에 특화된 처리들을 추상화하고 네트워크 스택의 어디에서든 이벤트를 쉽게 처리할 수 있는 인터페이스를 제공한다.

reactor는 본질적으로 다음과 같다.

~~~ {.python}
while True:
    timeout = time_until_next_timed_event()
    events = wait_for_events(timeout)
    events += timed_events_until(now())
    for event in events:
        event.process()
~~~

모든 플랫폼은 poll API를 기반으로하는 reactor가 기본이다. Twisted는 추가적으로 플랫폼에 종속된 high-volume multiplexing APIs를 지원한다. 플랫폼에 종속된 reactor는 FreeBSD의 kqueue를 이용한 KQueue reactor, epoll을 지원하는 시스템을 위한 epoll기반 reactor, Windows Input/Output Completion Ports를 기반으로 하는 IOCP reactor가 있다.

Twisted가 관리하는 polling 구현에 종속된 세부사항의 예는 다음과 같다.

* 네트워크 및 파일시스템의 한계점들.
* 버퍼링 방식.
* 연결 끊김을 인지하는 방법.
* 에러 발생시 리턴하는 값.

Twisted의 구현은 reactor는 저변의 non-blocking API의 사용과 애매한 특별한 상황에대한 올바른 처리에 주의를 기울였다. python은 IOCP API를 지원하지 않기때문에 Twisted는 이에대한 자체 구현을 관리한다.

### Managing Callback Chains
Callbacks는 event-driven programming의 근본적인 부분이고 reactor가 애플리케이션에게 이벤트가 완료되었음을 알리는 방법이다. event-driven program이 성장한다는 것은, 하나의 애플리케이션이 처리하는 성공 및 실패 상황을 위한 이벤트의 처리가 점점 복잡해지는 것을 의미한다. 적절한 callback의 등록을 실패하는것은 절대 발생하지않는 이벤트 처리 또는  네트워크 스택에서 부터 callback chain을 타고 상위 애플리케이션에 전파되었어야 할 에러에 프로그램을 멈춰 서 있게 한다.



