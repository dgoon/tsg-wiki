일단 그냥 막 번역부터 시작.
하다보면 가닥이 잡히겠지 ^^;;

# Twisted
 Twisted 는 python기반의 event-driven networking engine이다.언어를 불문하고, 네트워크 게임 제작자들이 그들의 목적에 사용 할 확장성 및 이식성을 갖춘 라이브러리가 별로 없던 2000년대 초반에 탄생했다.Twisted 제작자들은 현존하는 네트워크 환경에서 게임 개발을 시도하며 고생하다보니 확장성 및 이식성을 갖춘 event-driven networking framework의 필요성을 명확히 보았고, 과거 게임과 네트워크 어플리케이션 제작자의 실수와 힘들었던 점을 공부하여 하나 만들어보기로 결정했다.

Twisted는 TCP, UDP, SSL/TLS, HTTP, IMAP, SSH, IRC, FTP와 같은 다양한 transport, application layer의 protocols를 지원한다. 이것을 제작한 언어와 비슷하게 이것은 "batteries-included"이다. 즉, Twisted는 모든 protocol에 대한 server와 client 및 command line을 이용하여 쉽게 설정하고 배포할수 있게 도와주는 utilities를 포함하고 있다.

## Why Twisted?
2000년에 Twisted의 제작자 glyph는 Twisted Reality라는 text-based multiplayer game의 작업을 진행중이었다. 이것은 연결당 3개의 스레드가 실행되는 많은 스레드를 가진 JAVA구현이었다. 하나는 would block이 발생하는 read를 사용하는 입력을 담당하고, 다른 하나는 특별한 종류의 write에만 would block이 발생하는 출력을 담당하며, 마지막 하나는 타이머의 종료나 큐의 이벤트를 대기하는 스레드이다. 사용자들이 가상 세계를 이동하고 상호작용하면 스레드는 데드락이 걸리고, 캐시는 깨졌으며 동기화 로직은 제대로 작동하지 않았다. 즉, 스레드의 사용은 소프트웨어를 복잡하고, 버그가 많고 확장을 어렵게 만든것이다.

그는 대안을 찾던중 python을 발견했고 socket과 pips같은 stream object로 부터의 multiplexing I/O를 위한 "select" 모듈을 찾아냈다 (The Single UNIX Specification, Version 3 (SUSv3)에 select API의 설명이 있다). 동시에 JAVA는 select interface또는 비동기 I/O기능이 없었다 (J2SE 1.4의 java.nio는 2002년에 릴리즈). Python의 "select" 모듈을 사용해 제작한 게임의 프로토타입은 스레드 버전에 비해 덜 복잡하고 더욱 신뢰성있었다.

glyph은 즉시 python의 select와 event-driven programming으로 전환하여 게임의 서버와 클라이언트를 python의 select로 구현하였다. 하지만 그는 더 많은 일을 하고싶었다. 근본적으로, 그는 네트워크 활동을 게임내의 오브젝트에 대한 메소드 호출로 바꾸기를 바랬다. Nethack mailer daemon과 유사하게, 게임 내에서 이메일을 받을 수 있다면 어떨까? 게임의 모든 사용자가 홈페이지를 가지면 어떨까? Glyph은 그 자신이 python의 select를 사용한 좋은 IMAP과 HTTP 클라이언트 및 서버가 필요하다는 것을 발견했다.

그는 처음엔 Medusa를 고려했다. Medusa는 90년대 중반에 개발된 플랫폼으로 python의 asyncore 모듈을 이용한 네트워킹 서버 개발을 목적으로 한다. asyncore는 비동기 소켓 핸들러로써 OS의 select API위에서 dispatcher와 callback interface를 구성한다.

이것은 glyph에게 영감을 주는 발견이었지만 Medusa는 두 가지의 단점이 있었다.

1. Glyph가 Twisted Reality의 작업을 시작하던 2001년부터 유지보수가 되지 않았었다.
2. asyncore는 socket을 감싸는 wrapper였기때문에 애플리케이션 프로그래머는 여전히 socket을 직접 조작해야 했다. 이는 이식성이 여전히 프로그래머의 몫으로 남아있음을 의미했다. 더욱이 그 당시 asyncore의 windows 지원은 버그가 많았고 glyph는 그가 windows의 GUI client를 원하게 될것이라는 것을 알고 있었다.

Glyph는 그 자신이 networking platform을 구현할 가능성에 직면했고, Twisted Reality가 그의 게임과 같이 흥미로운 문제의 문을 열었다는 것을 실감했다.

시간이 지나, Twisted Reality game은 Twisted networking platform이 되었고 이것은 현존하는 python의 network platforms가 하지 못하는 일을 할 수 있다.

* Multi-threaded programming대신에 event-driven programming을 사용한다.
* 이식성 : 주요 OS가 제공하는 event notification system에대해 단일한 인터페이스 제공.
* "batteries-included" : 외부와 통신하는 유명한 application-layer protocols의 구현을 제공하여 Twisted를 개발자에게 바로 사용할수 있게 한다.
* RFC를 준수하고, 견고한 test suit와 함께 적합성을 제공한다.
* 하나 이상의 networking protocols를 쉽게  함께 사용할수 있도록 한다.
* 확장성이 있다.

## The Architecture of Twisted
Twisted는 event-driven networking engine이다. Event-driven programming은 Twisted의 디자인 철학에 통합되어 있다. 잠깐 event-driven programming의 의미를 정확히 알아보자.

Event-driven programming은 program flow가 external event에 의해 정의되는 programming paradigm이다. 이것의 개성은 이벤트 루프와 이벤트 발생 시 실행되는 callbacks로 나타난다. 두개의 다른 공통 programming paradigm들은 (single-threaded) synchronous 과 multi-threaded programming이다.

예제를 통해 single threaded, multi-threaded, event-driven programming models를 비교 해 보자. 그림 1은 이 세가지 모델에서 시간의 흐름에 따른 작업 완료를 보여준다.   program은 완료해야하는 세 개의 작업이 있고 각 작업은 I/O의 완료를 기다리기 위해 블록된다. I/O의 완료를 대기하는 시간은 회색으로 표시된다.

![그림 1 Threading models](http://www.aosabook.org/images/twisted/threading_models.png)

Single-threaded synchronous 버전의 프로그램은 작업이 순서대로 실행된다. 만약 하나의 작업이 I/O동안 블록된다면 모든 나머지 작업들은 그것이 끝나고 그들의 차례가 될 때 까지 기다려야 한다. 이 결정론적인 순서와 순차 작업은 이해하기 쉽지만 각각의 프로그램에 의존성이 없는 경우, 각 프로그램은 다른 프로그램을 기다려야 하기 때문에 불필요하게 느려진다.

Threaded버전의 프로그램은 진행 중 블록되는 세 작업을 각각의 스레드에서 제어한다. 이 스레드들은 OS가 관리하며 multiple processors 환경에서는 동시에 실행되지만 single processor환경에서는 교대로 실행된다. 이것은 다른 스레드가 블록된 상태에도 일부 스레드들은 작동할수 있게 한다. 이것은 종종 유사한 synchronous program보다 시간 효율적이지만 여러 스레드에서 동시에 접근할 수 있는 공유자원의 보호를 위한 코드를 추가해야한다. Multi-threaded programs는 좀 더 이해하기 어려워지는데 이는 프로세스 직렬화(잠금), 재진입, 스레드 지역 저장소 등 구현이 올바르지 않을 경우 찾기 어렵고 골치아픈 버그를 만들어내는 메커니즘들에 대해 고민해야 하기 때문이다.

Event-driven버전의 프로그램은 세 작업을 교대로 실행하지만 single thread에서 제어한다. I/O나 고 비용의 작업을 실행할 때, callback이 event loop에 등록되고, I/O가 완료될 동안 실행은 계속된다. callback은 작업이 완료되었을 때 수행할 작업을 설명한다. event loop는 event를 대기하고 event가 도착하면 이에 대해 대기중인 callback을 실행한다. 이것은 스레드의 도움없이 가능할 때 실행을 계속할 수 있도록 해 준다. Event-driven프로그램은 프로그래머가 thread safety에 대해 걱정할 필요가 없기 때문에 multi-threaded 프로그램보다 이해하기 쉽다.

다음과 같을때 event-driven model은 좋은 선택이다:

1. 많은 작업들. 그것들이....
2. 독립적이고....(서로 통신하거나 대기할 필요가 없다는 말)
3. 이 중 어떤것들은 이벤트를 대기하는 동안 블록될때.

동기화의 필요가 없기때문에 어플리케이션이 작업간에 변경가능한 데이터를 공유할때 좋은 선택이다.

네트워킹 어플리케이션은 종종 정확히 이러한 특징을 가지기 때문에 event-driven model에 딱 맞다.

### Reusing Existing Applications
Twisted가 만들어졌을때 이미 network protocols를 위해 많은 유명한 clients와 servers가 있었다. 왜 glyph는 Apache, IRCd, BIND, OpenSSH등 이미 존재하는 어플리케이션과 이것들의 client, server를 사용하지 않고 Twisted를 위해 처음부터 개발했을까?

이 server들은 일반적으로 C로 처음부터 구현된 networking code를 가지고 있었고 어플리케이션의 코드가 networking layer와 직접 연결되어있는 문제가 있었다. 이러한 문제로 인해 이것들을 라이브러리로 사용하기 힘들게 한다. 이들을 동시에 사용할 때 블랙박스로 다루어야만 하며, 개발자가 같은 데이터를 다중의 프로토콜에 전송하고자 할 때 코드를 재사용할 방법을 제공하지 않는다. 이에 더해 server와 client구현은 종종 코드를 공유하지 않는 분리된 어플리케이션이다. 이 어플리케이션들을 확장하고 다양한 환경에서 client-server 호환성을 관리하는 것은 이것들의 필요성보다 더 어려운일이다.

Twisted에 있는 client와 server는 일관된 interface를 사용하는 python으로 쓰여졌다. 이는 clients와 servers의 코드 공유, protocol간의 application logic 공유, test 코드등을 통해 새로운 clients와 servers를 제작하기 쉽게 해준다.

### The Reactor
Twisted는 reactor design pattern을 구현한다. 이것은 single-threaded 환경에서 다양한 소스에서 발생하는 이벤트를 demultiplexing 하고  그에 맞는 핸들러를 dispatch하는 구조에 대한 설명이다.

Twisted의 핵심은 reactor event loop이다. reactor는 network, filesystem, timer events에 대해 알고 있다. 이것은 이벤트를 기다리고 처리한다. 플랫폼에 특화된 처리들을 추상화하고 네트워크 스택의 어디에서든 이벤트를 쉽게 처리할 수 있는 인터페이스를 제공한다.

reactor는 본질적으로 다음과 같다.

~~~ {.python}
while True:
    timeout = time_until_next_timed_event()
    events = wait_for_events(timeout)
    events += timed_events_until(now())
    for event in events:
        event.process()
~~~

모든 플랫폼은 poll API를 기반으로하는 reactor가 기본이다. Twisted는 추가적으로 플랫폼에 종속된 high-volume multiplexing APIs를 지원한다. 플랫폼에 종속된 reactor는 FreeBSD의 kqueue를 이용한 KQueue reactor, epoll을 지원하는 시스템을 위한 epoll기반 reactor, Windows Input/Output Completion Ports를 기반으로 하는 IOCP reactor가 있다.

Twisted가 관리하는 polling 구현에 종속된 세부사항의 예는 다음과 같다.

* 네트워크 및 파일시스템의 한계점들.
* 버퍼링 방식.
* 연결 끊김을 인지하는 방법.
* 에러 발생시 리턴하는 값.

Twisted의 구현은 reactor는 저변의 non-blocking API의 사용과 애매한 특별한 상황에대한 올바른 처리에 주의를 기울였다. python은 IOCP API를 지원하지 않기때문에 Twisted는 이에대한 자체 구현을 관리한다.

### Managing Callback Chains
Callbacks는 event-driven programming의 근본적인 부분이고 reactor가 애플리케이션에게 이벤트가 완료되었음을 알리는 방법이다. event-driven program이 성장한다는 것은, 하나의 애플리케이션이 처리하는 성공 및 실패 상황을 위한 이벤트의 처리가 점점 복잡해지는 것을 의미한다. 적절한 callback의 등록을 실패하는것은 절대 발생하지않는 이벤트 처리 또는  네트워크 스택에서 부터 callback chain을 타고 상위 애플리케이션에 전파되었어야 할 에러에 프로그램을 멈춰 서 있게 한다.

동기/비동기 방식의 URL fetching utility의 python-like pseudo-code를 이용하여 event-driven program의 함정에 대해 알아보자.

Synchronous URL fetcher:

~~~ {.python}
import getPage

def processPage(page):
    print page

def logError(error):
    print error

def finishProcessing(value):
    print "Shutting down...."
    exit(0)

url = "http://google.com"
try:
    page = getPage(url)
    processPage(page)
except Error, e:
    logError(error)
finally:
    finishProcessing()
~~~

Asynchronous URL fetcher:

~~~ {.python}
from twisted.internet import reactor
import getPage

def processPage(page):
    print page
    finishProcessing()

def logError(error):
    print error
    finishProcessing()

def finishProcessing(value):
    print "Shutting down..."
    reactor.stop()

url = "http://google.com"
# getPage takes: url,
#    success callback, error callback
getPage(url, processPage, logError)

reactor.run()
~~~

비동기 URL fetcher에서 reactor.run()은 reactor event loop를 시작한다. 동기/비동기 버전에서 가상의 getPage 함수는 페이지 검색기능을 수행한다. processPage는 검색이 성공했을 때 호출되고 logError는 페이지의 검색 도중 Exception이 발생했을 때 호출된다. 각각의 경우에 finishProcessing함수가 마지막에 호출된다.

비동기 버전의 logError 콜백은 비동기버전의 try/except 블록의 except파트에 해당한다. processPage콜백은 else에 조건없는 finishProcessing 콜백은 finally에 해당한다.

동기버전은 try/except 블록의 유용성에 힘입어 logError와 processPage 중 하나만 정확히 호출하고 finishProcessing은 항상 호출된다. 비동기버전은 실패 또는 성공의 경우에 호출되는 콜백 체인을 적절히 구성할 책임을 프로그래머에게 떠넘긴다. 에러상태라 할지라도 finishProcessing이 processPage또는 logError의 콜백 체인에 포함되지 않는다면 reactor는 절대 멈추지 않을것이고 프로그램은 영원히 실행된다.

이 간단한 예제는 초창기 Twisted의 개발기간 동안의 복잡성 좌절에 대한 힌트이다. Twisted는 이 복잡성에 대해 Deferred라는 객체를 만들어냄으로써 응답했다.

### Deferreds

Deferred 객체는 아직 존재하지 않는 결과를 나타내는 아이디어에 대한 추상이다. 이것은 또한 이 결과에 대한 콜백 체인을 관리하는데 도움을 준다. 함수에서 리턴했을때, Deferred는 그 함수가 어떤 지점에서 결과를 가지리라는 것에 대한 약속이다. 리턴된 하나의 Deferred는 이벤트에 대한 모든 콜백의 참조를 포함하기때문에 이것 하나만 함수 사이에 전달함으로써 개별 콜백을 전달하는 것 보다 간단히 콜백을 관리할 수 있다.

Deferred는 한 쌍의 콜백 체인을 가진다. 하나는 성공을 위한 것(callbacks) 다른 하나는 에러를 위한것(errbacks)이다. Deferred는 두 개의 비어있는 체인으로 시작한다. 이벤트 처리의 각 단계마다 성공과 실패를 처리 할 callback과 errback 쌍을 하나씩 등록한다. 비동기 결과가 도착하면, Deferred는 "fired"가 되고 적절한 callback 또는 errback이 추가된 순서대로 호출된다.

Deferred를 사용한 버전의 비동기 URL fetcher pseudo-code이다:

~~~ {.python}
from twisted.internet import reactor
import getPage

def processPage(page):
    print page

def logError(error):
    print error

def finishProcessing(value):
    print "Shutting down..."
    reactor.stop()

url = "http://google.com"
deferred = getPage(url) # getPage returns a Deferred
deferred.addCallbacks(processPage, logError)
deferred.addBoth(finishProcessing)

reactor.run()
~~~

이 버전에서 같은 이벤트 핸들러가 호출되지만 이것들은 코드 전체에 흩어지고 getPage함수의 매개변수로 전달되는 대신 하나의 Deferred객체에 등록된다.

Defered는 두 단계의 callbacks들과 함께 생성된다. 처음의 addCallbacks는 processPage 콜백과 logError 콜백을 체인의 첫 단계에 추가한다. 그 다음 addBoth는 finishProcessing을 양쪽 체인의 두 번째 단계에 추가한다. 그림으로 보면 다음과 같다.

![그림 2](http://www.aosabook.org/images/twisted/deferred.png)

Deferred는 딱 한번만 fire될 수 있다. 다시 하려하면 Exception을 일으킨다. 이것은 Deferred의 문맥적인 의미를 동기 구현의 try/except와 비슷하게 만들어주어 비동기 이벤트 처리를 이해하기 쉽게 해주고 하나의 이벤트에 대해 한 번 이상 또는 이하로 콜백이 호출됨에 따른 골치아픈 버그를 없애준다.

Twisted 프로그램의 플로우를 이해하기 위해서는 Deferred의 이해가 중요하다. 하지만 Twisted가 제공하는 네트워크 프로토콜을 위한 고수준의 추상을 사용하는 경우에는 Deferred를 직접 호출 하는 일은 없다.

Deferred의 추상화는 매우 강력하고 jQuery, Dojo, Mochikit과 같은 다른 event-driven platforms에서 차용해가는 기능이다.

### Transports
Transports는 네트워크를 넘어 통신하는 두 종단의 사이의 연결을 나타낸다. Transports는 stream- 또는 diagram-oriented, flow control, 신뢰성등의 연결에 대한 세부사항을 설명할 책임이 있다. TCP, UDP, UDS가 transport의 예이다. 이것들은 "최대한의 재상용을 위한 최소한의 기능"을 하도록 설계되었고 프로토콜 구현과 분리되어, 같은 형식의 transport를 많은 프로토콜이 사용할 수 있도록 한다. Transport는 ITransport 인터페이스를 구현한다. 인터페이스는 다음의 메소드를 가진다:

write
:    non-blocking 방식으로 순서대로 물리적인 연결에 데이터를 쓴다.
writeSequence
:    물리적인 연결에 문자열 리스트를 쓴다.
loseConnection
:    지연된 모든 데이터를 쓰고 연결을 닫는다.
getPeer
:    해당 연결에 대한 원격지의 주소를 얻는다.
getHost
:    해당 연결에 대한 지역의 주소를 얻는다.

프로토콜로부터 transport를 떼어놓아서 두 레이어의 테스트가 용이하다. Mock transport는 검사를 위해 데이터를 단순히 문자열에 쓸 수 있다.

### Protocols
Protocols는 네트워크 이벤트를 비동기적을 어떻게 처리할 지 설명한다. HTTP, DNS, IMAP들은 애플리케이션 프로토콜의 예이다. Protocols는 IProtocol인터페이스를 구현하고 다음의 메소드를 포함한다:

makeConnection
:    Transport와 server에 연결을 만든다.
connectionMade
:    연결이 만들어지면 불린다.
dataReceived
:    데이터를 수신하면 불린다.
connectionLost
:    연결이 닫히면 불린다.

다음의 예제는 reactor, protocols, transports의 관계를 잘 나타낸다. echo server와 client의 완전한 구현이다.

~~~ {.python}
from twisted.internet import protocol, reactor

class Echo(protocol.Protocol):
    def dataReceived(self, data):
        # As soon as any data is received, write it back.
        self.transport.write(data)

class EchoFactory(protcol.Factory):
    def buildProtocol(self, addr):
        return Echo()

reactor.listenTCP(8000, EchoFactory())
reactor.run()
~~~

~~~ {.python}
from twisted.internet import reactor, protocol

class EchoClient(protocol.Protocol):
    def connectionMade(self):
        self.transport.write("hello world!")

    def dataReceived(self, data):
        print "Server said:", data
        self.transport.loseConnection()

    def connectionLost(self, reason):
        print "connection lost"

class EchoFactory(protocol.ClientFactory)
    def buildProtocol(self, adr):
        return EchoClient()

    def clientConnectionFailed(self, connector, reason):
        print "Connection failed - goodbye!"
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print "Connection lost - goodbye!"
        reactor.stop()

reactor.connectTCP("localhost", 8000, EchoFactory())
reactor.run
~~~

server 스크립트를 실행하면 8000포트를 listening하는 TCP server가 시작한다. 서버는 echo 프로토콜을 사용하고 TCP transport를 통해 데이터를 내보낸다. client를 실행하면 server와의 TCP 연결을 맺고 서버의 응답을 출력하고 연결을 닫고 reactor를 종료한다. Factory는 양측에 필요한 인스턴스를 생성하는데 사용된다. 통신은 양측에서 비동기이다; connectTCP는 reactor에 socket에 데이터가 도착했을 때 호출할 callbacks를 등록하는 일을 한다.

### Applications
Twisted는 확장성과 이식성이 있는 네트워크 서버 및 클라이언트를 제작하기 위한 엔진이다. 표준적인 형태의 제품환경에서 배포하는 일을 편리하게 하는 것은 이러한 플랫폼을 널리 적용하는데 중요한 요소이다.
이러한 이유로 Twisted는 Twisted application infrastructure를 개발하였다. 이것은 재사용 및 설정 가능한 Twisted application의 배포 방법이다. 이것은 작동 방식을 제어하기 위해 이미 존재하는 툴인 daemonization, logging, custom reactor, profiling code 등을 application이 후킹하는 방법으로 프로그래머에게 보일러플레이트 코드를 피하게 해 준다.

Application infrastructure는 4개의 주요 파트로 이루어져 있다:
* Services
* Applications
* Configuration management
* Twisted command-line utility

이 infrastructure의 예를 들기 위해 이전 장의 echo server를 Application으로 변형 해 본다.

#### Service
IService 인터페이스를 제공하며 시작하고 종료할 수 있는 어떤것이든 Service라 할 수 있다. Twisted는 TCP, FTP, HTTP, SSH, DNS등의 프로토콜을 구현한 service와 함께 제공된다. 많은 서비스를 하나의 어플리케이션에 등록할 수 있다.
IService 인터페이스의 핵심은 다음과 같다.

startService
:    서비스를 시작한다. 이것은 설정값을 읽거나 데이터베이스 연결을 설정하거나 포트를 listening할지도 모른다.
stopService
:    서비스를 종료한다. 이것은 상태를 디스크에 저장하거나 데이터베이스 연결을 종료하거나 포트의 linstening을 종료할지도 모른다.

우리의 echo service는 TCP를 사용하기 때문에 IService interface를 구현하는 Twisted의 기본 TCPServer를 사용할 수 있다.

#### Application
Application은 전체 Twisted application을 대표하는 최상위 서비스이다. 서비스들은 그 자신을 Application에 등록하고 twisted 배포 유틸리티가 Application을 검색하고 실행에 대한 설명을 제공한다.

이제 등록 가능한 echo Service인 echo Application을 만들어보자.

#### TAC Files
Twisted application을 정규 python file에 관리하게되면 개발자는 reactor의 시작과 종료, application의 설정에 대한 코드를 작성해야 한다. Twisted infrastructure에서는 프로토콜은 모듈로써 존재하고 이러한 프로토콜을 사용한 Services는 Twisted Application Configuration(TAC) 파일에 등록되며 reactor와 configuration은 외부 유틸리티를 이용해 관리한다.

아래의 간단한 알고리즘을 따르면 echo server를 echo application으로 바꿀 수 있다.

echo server의 프로토콜 부분을 모듈로 만든다.
TAC file의 내부는 다음과 같다.
echo Application을 만든다.
TCPServer Service의 인스턴스를 만든다. 이것은 EchoFactory가 사용할 것이고 Application에 등록된다.
아래에서 이야기 하는 Twisted가 사용 할 reactor를 관리 할 코드를 작성한다.
application code는 다음과 같을 것이다.

echo.py

~~~ {.python}
from twisted.internet import protocol

class Echo(protocol.Protocol):
    def dataReceived(self, data):
        self.transport.write(data)

class EchoFactory(protocol.Factory):
    def buildProtocol(self, addr):
    return Echo()
~~~

echo_server.tac

~~~ {.python}
from twisted.application import internet, service
from echo import EchoFactory

application = service.Application("echo")
echoService = internet.TCPServer(8000, EchoFactory())
echoService.setServiceParent(application)
~~~

#### twistd
twisted는 Twisted application을 배포하기위한 이식성 있는 유틸리티이다. 이것은 TAC파일을 실행하고 application의 시작과 종료를 제어한다. Twisted의 네트워크 프로그래밍에 대한 batteries-included 접근법의 하나로 twisted는 daemonizing the application, the location of log files, dropping privileges, running in a chroot, running unter a non-default reactor, running the application under a profiler와 같은 다양하고 유용한 설정 플래그를 제공한다.

이제 echo server Application을 다음과 같이 실행할 수 있다.

~~~
$ twistd -y echo_server.tac
~~~