일단 그냥 막 번역부터 시작.
하다보면 가닥이 잡히겠지 ^^;;

# Twisted
 Twisted 는 python기반의 event-driven networking engine이다.언어를 불문하고, 네트워크 게임 제작자들이 그들의 목적에 사용 할 확장성 및 이식성을 갖춘 라이브러리가 별로 없던 2000년대 초반에 탄생했다.Twisted 제작자들은 현존하는 네트워크 환경에서 게임 개발을 시도하며 고생하다보니 확장성 및 이식성을 갖춘 event-driven networking framework의 필요성을 명확히 보았고, 과거 게임과 네트워크 어플리케이션 제작자의 실수와 힘들었던 점을 공부하여 하나 만들어보기로 결정했다.

Twisted는 TCP, UDP, SSL/TLS, HTTP, IMAP, SSH, IRC, FTP와 같은 다양한 transport, application layer의 protocols를 지원한다. 이것을 제작한 언어와 비슷하게 이것은 "batteries-included"이다. 즉, Twisted는 모든 protocol에 대한 server와 client 및 command line을 이용하여 쉽게 설정하고 배포할수 있게 도와주는 utilities를 포함하고 있다.

## Why Twisted?
2000년에 Twisted의 제작자 glyph는 Twisted Reality라는 text-based multiplayer game의 작업을 진행중이었다. 이것은 연결당 3개의 스레드가 실행되는 많은 스레드를 가진 JAVA구현이었다. 하나는 would block이 발생하는 read를 사용하는 입력을 담당하고, 다른 하나는 특별한 종류의 write에만 would block이 발생하는 출력을 담당하며, 마지막 하나는 타이머의 종료나 큐의 이벤트를 대기하는 스레드이다. 사용자들이 가상 세계를 이동하고 상호작용하면 스레드는 데드락이 걸리고, 캐시는 깨졌으며 동기화 로직은 제대로 작동하지 않았다. 즉, 스레드의 사용은 소프트웨어를 복잡하고, 버그가 많고 확장을 어렵게 만든것이다.

그는 대안을 찾던중 python을 발견했고 socket과 pips같은 stream object로 부터의 multiplexing I/O를 위한 "select" 모듈을 찾아냈다 (The Single UNIX Specification, Version 3 (SUSv3)에 select API의 설명이 있다). 동시에 JAVA는 select interface또는 비동기 I/O기능이 없었다 (J2SE 1.4의 java.nio는 2002년에 릴리즈). Python의 "select" 모듈을 사용해 제작한 게임의 프로토타입은 스레드 버전에 비해 덜 복잡하고 더욱 신뢰성있었다.

glyph은 즉시 python의 select와 event-driven programming으로 전환하여 게임의 서버와 클라이언트를 python의 select로 구현하였다. 하지만 그는 더 많은 일을 하고싶었다. 근본적으로, 그는 네트워크 활동을 게임내의 오브젝트에 대한 메소드 호출로 바꾸기를 바랬다. Nethack mailer daemon과 유사하게, 게임 내에서 이메일을 받을 수 있다면 어떨까? 게임의 모든 사용자가 홈페이지를 가지면 어떨까? Glyph은 그 자신이 python의 select를 사용한 좋은 IMAP과 HTTP 클라이언트 및 서버가 필요하다는 것을 발견했다.

그는 처음엔 Medusa를 고려했다. Medusa는 90년대 중반에 개발된 플랫폼으로 python의 asyncore 모듈을 이용한 네트워킹 서버 개발을 목적으로 한다. asyncore는 비동기 소켓 핸들러로써 OS의 select API위에서 dispatcher와 callback interface를 구성한다.

이것은 glyph에게 영감을 주는 발견이었지만 Medusa는 두 가지의 단점이 있었다.

1. Glyph가 Twisted Reality의 작업을 시작하던 2001년부터 유지보수가 되지 않았었다.
2. asyncore는 socket을 감싸는 wrapper였기때문에 애플리케이션 프로그래머는 여전히 socket을 직접 조작해야 했다. 이는 이식성이 여전히 프로그래머의 몫으로 남아있음을 의미했다. 더욱이 그 당시 asyncore의 windows 지원은 버그가 많았고 glyph는 그가 windows의 GUI client를 원하게 될것이라는 것을 알고 있었다.

Glyph는 그 자신이 networking platform을 구현할 가능성에 직면했고, Twisted Reality가 그의 게임과 같이 흥미로운 문제의 문을 열었다는 것을 실감했다.

시간이 지나, Twisted Reality game은 Twisted networking platform이 되었고 이것은 현존하는 python의 network platforms가 하지 못하는 일을 할 수 있다.

* Multi-threaded programming대신에 event-driven programming을 사용한다.
* 이식성 : 주요 OS가 제공하는 event notification system에대해 단일한 인터페이스 제공.
* "batteries-included" : 외부와 통신하는 유명한 application-layer protocols의 구현을 제공하여 Twisted를 개발자에게 바로 사용할수 있게 한다.
* RFC를 준수하고, 견고한 test suit와 함께 적합성을 제공한다.
* 하나 이상의 networking protocols를 쉽게 사용할수 있도록 한다.
* 확장성이 있다.


