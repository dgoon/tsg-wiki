또 번역부터 해 보자...



FreeRTOS는 임베디드 시스템을 위한 오픈소스 실시간 운영체제이다. FreeRTOS는 다양한 아키텍쳐와 컴파일러 툴체인을 지원하고 "작고, 쉽게 사용"할수 있도록 디자인되었다.

FreeRTOS는 활발히 개발중이고 Richard Barry가 2002년부터 시작했다. 나는 FreeRTOS의 개발에 참여하지 않는 단순한 사용자이고 팬이다. 따라서 이 챕터에서는 FreeRTOS가 다른 챕터에서 왜대한 이야기를 하는 것과 달리, 무엇이고 어떻게 작동하는지에 대해 다룰 예정이다.

다른 운영체제와 같이 FreeRTOS의 주된 일은 tasks를 실행하는 것이다. 대부분의 FreeRTOS의 코드는 우선순위 지정, 스케쥴링, 사용자 작업의 실행과 관련되어 있다.

나는 이 챕터를 끝낼때 독자가 FreeRTOS의 기본 아키텍쳐에 대해 이해하기를 바란다. FreeRTOS의 대부분은 tasks의 실행에 연관되어 있기때문에 독자는 FreeRTOS가 이를 어떻게 이를 수행하는지 정확하게 파악할 수 있을것이다.

만약 이 내용이 처음으로 접하는 운영체제 내부에 대한 이야기라면 OS의 작동에 대한 기본을 배울것이라 기대한다. FreeRTOS는 Windows, Linux, OS X 에 비해 상대적으로 간단하지만 모든 운영체제는 유사한 형태와 목표를 공유한다. 따라서 어떤 운영체제를 살펴봐도 유익하고 흥미로울것이다.

#What's "Embedded" and "Real-Time"?

임베디드와 리얼타임은 사람마다 다르게 정의할 수 있기때문에 FreeRTOS의 방식으로 정의 해 보자.

임베디드 시스템은 TV 리모컨의 시스템, 자동차 GPS, 디지털 시계, 심박동기와 같이 제한된 작업만 수행하도록 디자인된 컴퓨터 시스템이다. 임베디드 시스템은 일반적으로 범용 컴퓨터시스템보다 작고 느리며 저렴하다. 일반적인 저급 임베디드 시스템은 25MHz로 작동하는 8비트 CPU, 수 KB의 램, 32KB정도의 플래쉬 메모리로 구성된다. 상급 임베디드 시스템은 750MHz로 작동하는 32비트 CPU와 GB의 램, 수 GB의 플래쉬 메모리로 구성된다.

리얼타임 시스템은 어떤 일을 정해진 시간내에 수행하도록 디자인된다. 제때 일을 수행함을 보장하는 것이다.

심장박동기는 리얼타임 임베디드 시스템의 좋은 예이다. 심장박동기는 당신의 생명을 유지하기 위해 심장 근육을 제시간에 수축시켜야 한다. 이것은 제시간에 응답하지 못할만큼 바빠서는 안된다. 심장박동기와 같은 리얼타임 임베디드 시스템들은 작업을 매번 제시간에 실행하도록 세심히 디자인된다.

#Architecture Overview
FreeRTOS는 상대적으로 작은 애플리케이션이다. FreeRTOS의 최소한의 핵심 부분은 세 개의 .c 파일과 약간의 헤더파일로 구성되며 빈 라인과 주석 포함해 9000라인 정도이다. 일반적인 바이너리 코드 이미지는 10KB보자 작다.

FreeRTOS의 코드는 세 부분으로 나누어볼 수 있다 : tasks, communication, hardware interfacing

- Tasks: FreeRTOS 코드의 거의 절반은 많은 운영체제의 핵심 문제를 다룬다. 바로 tasks!. Task는 우선순위가 주어진 사용자 정의 C 함수이다. tasks.c/tasks.h는 생성, 스케쥴링, 관리와 관련된 힘든 일들을 담당한다.

- Communication: Tasks들은 좋지만 이들이 서로 통신한다면 더 좋다! FreeRTOS의 두번째 일인 communication에 대해 이야기하자. FreeRTOS 핵심 코드의 약 40%는 communication과 관련되어 있다.



Communication: Tasks are good, but tasks that can communicate with each other are even better! Which brings us to the second FreeRTOS job: communication. About 40% of FreeRTOS's core code deals with communication. queue.c and queue.h handle FreeRTOS communication. Tasks and interrupts use queues to send data to each other and to signal the use of critical resources using semaphores and mutexes.

The Hardware Whisperer: The approximately 9000 lines of code that make up the base of FreeRTOS are hardware-independent; the same code runs whether FreeRTOS is running on the humble 8051 or the newest, shiniest ARM core. About 6% of FreeRTOS's core code acts a shim between the hardware-independent FreeRTOS core and the hardware-dependent code. We'll discuss the hardware-dependent code in the next section.