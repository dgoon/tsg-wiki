또 번역부터 해 보자...



FreeRTOS는 임베디드 시스템을 위한 오픈소스 실시간 운영체제이다. FreeRTOS는 다양한 아키텍쳐와 컴파일러 툴체인을 지원하고 "작고, 쉽게 사용"할수 있도록 디자인되었다.

FreeRTOS는 활발히 개발중이고 Richard Barry가 2002년부터 시작했다. 나는 FreeRTOS의 개발에 참여하지 않는 단순한 사용자이고 팬이다. 따라서 이 챕터에서는 FreeRTOS가 다른 챕터에서 왜대한 이야기를 하는 것과 달리, 무엇이고 어떻게 작동하는지에 대해 다룰 예정이다.

다른 운영체제와 같이 FreeRTOS의 주된 일은 tasks를 실행하는 것이다. 대부분의 FreeRTOS의 코드는 우선순위 지정, 스케쥴링, 사용자 작업의 실행과 관련되어 있다.

나는 이 챕터를 끝낼때 독자가 FreeRTOS의 기본 아키텍쳐에 대해 이해하기를 바란다. FreeRTOS의 대부분은 tasks의 실행에 연관되어 있기때문에 독자는 FreeRTOS가 이를 어떻게 이를 수행하는지 정확하게 파악할 수 있을것이다.

만약 이 내용이 처음으로 접하는 운영체제 내부에 대한 이야기라면 OS의 작동에 대한 기본을 배울것이라 기대한다. FreeRTOS는 Windows, Linux, OS X 에 비해 상대적으로 간단하지만 모든 운영체제는 유사한 형태와 목표를 공유한다. 따라서 어떤 운영체제를 살펴봐도 유익하고 흥미로울것이다.

#What's "Embedded" and "Real-Time"?

임베디드와 리얼타임은 사람마다 다르게 정의할 수 있기때문에 FreeRTOS의 방식으로 정의 해 보자.

임베디드 시스템은 TV 리모컨의 시스템, 자동차 GPS, 디지털 시계, 심박동기와 같이 제한된 작업만 수행하도록 디자인된 컴퓨터 시스템이다. 임베디드 시스템은 일반적으로 범용 컴퓨터시스템보다 작고 느리며 저렴하다. 일반적인 저급 임베디드 시스템은 25MHz로 작동하는 8비트 CPU, 수 KB의 램, 32KB정도의 플래쉬 메모리로 구성된다. 상급 임베디드 시스템은 750MHz로 작동하는 32비트 CPU와 GB의 램, 수 GB의 플래쉬 메모리로 구성된다.

리얼타임 시스템은 어떤 일을 정해진 시간내에 수행하도록 디자인된다. 제때 일을 수행함을 보장하는 것이다.

심장박동기는 리얼타임 임베디드 시스템의 좋은 예이다. 심장박동기는 당신의 생명을 유지하기 위해 심장 근육을 제시간에 수축시켜야 한다. 이것은 제시간에 응답하지 못할만큼 바빠서는 안된다. 심장박동기와 같은 리얼타임 임베디드 시스템들은 작업을 매번 제시간에 실행하도록 세심히 디자인된다.

#Architecture Overview
FreeRTOS는 상대적으로 작은 애플리케이션이다. FreeRTOS의 최소한의 핵심 부분은 세 개의 .c 파일과 약간의 헤더파일로 구성되며 빈 라인과 주석 포함해 9000라인 정도이다. 일반적인 바이너리 코드 이미지는 10KB보다 작다.

FreeRTOS의 코드는 세 부분으로 나누어볼 수 있다 : tasks, communication, hardware interfacing

- Tasks: FreeRTOS 코드의 거의 절반은 많은 운영체제의 핵심 문제를 다룬다. 바로 tasks!. Task는 우선순위가 주어진 사용자 정의 C 함수이다. tasks.c/tasks.h는 생성, 스케쥴링, 관리와 관련된 힘든 일들을 담당한다.

- Communication: Tasks들은 좋지만 이들이 서로 통신한다면 더 좋다! FreeRTOS의 두번째 일인 communication에 대해 이야기하자. FreeRTOS 핵심 코드의 약 40%는 communication과 관련되어 있다. queue.c와 queue.h는 FreeRTOS의 통신을 담당한다. Tasks와 인터럽트들은 각자 데이터 전달을 위해 queues를 사용하고 세마포어와 뮤텍스를 이용하여 독점적인 자원 사용을 알린다.

- The Hardware Whisperer :  FreeRTOS를 구성하는 약 9000줄의 코드는 하드웨어 독립적이다. FreeRTOS를 실행하는 CPU가 누추한 8051이건 상콤한 ARM core건 같은 코드가 실행된다. 약 6%의 FreeRTOS의 코드가 하드웨어 독립적인 부분과 하드웨어 의존적인 부분의 틈을 매우는 역할을 한다. 다음 섹션에서 하드웨어 의존적인 부분에 대해 이야기 할 것이다.

## Hardware Considerations
FreeRTOS의 하드웨어 독립적인 부분은 하드웨어 의존적인 부분의 위에 놓여 있다. 하드웨어 의존적인 부분은 당신이 선택한 CPU가 무엇이건 제어 방법을 알고 있다. 그림 3.1은 FreeRTOS의 계층구조를 보여준다.

![image](http://www.aosabook.org/images/freertos/freertos-figures-layers.png)
그림 3.1 FreeRTOS의 소프트웨어 계층 구조

FreeRTOS는 실행될 모든 하드웨어 독립/의존 코드를 포함하여 배포된다. 이것은 많은 컴파일러 (CodeWarrier, GCC, IAR, etc..)와 프로세서 아키텍쳐 (ARM7, ARM Cotex-M3, various PICs, Silicon Labs 8051, x86, etc.)를 지원한다. 자세한 정보는 FreeRTOS의 웹사이트를 참고하면된다.

FreeRTOS는 디자인부터 많은 부분이 설정가능하도록 되어 있다. FreeRTOS는 몇몇의 tasks를 지원하는 single CPU의 헐벗은 RTOS부터 TCP/IP, 파일시스템, USB를 지원하는 고성능의 멀티코어 짐승까지 만들어 낼 수 있다.

설정 옵선은 FreeRTOSConfig.h의 #define을 설정해서 지정 가능하다. Clock speed, heap size, mutexes, API subsets 등등의 많은 옵션들이 이 파일로 설정 가능하다. 아래에 maximum number of task priority levels, the CPU frequency, the system tick frequency, the minimal stack size, the total heap size를 설정하는 예제를 보인다.

~~~ {.c}
#define configMAX_PRIORITIES      ( ( unsigned portBASE_TYPE ) 5 )
#define configCPU_CLOCK_HZ        ( 12000000UL )
#define configTICK_RATE_HZ        ( ( portTickType ) 1000 )
#define configMINIMAL_STACK_SIZE  ( ( unsigned short ) 100 )
#define configTOTAL_HEAP_SIZE     ( ( size_t ) ( 4 * 1024 ) )
~~~

하드웨어 의존 코드는 각 컴파일러 툴체인 및 CPU 아키텍쳐를 위한 파일에 분리되어 있다. 예를 들어, ARM Cortex-M3와 IAR compiler를 사용중이라면 하드웨어 의존 코드는 FreeRTOS/Source/portable/IAR/ARM_CM3 디렉토리에 있을것이다. portmacro.h는 모든 하드웨어 종속 기능을 선언하고 있지만, port.c와 portasm.c에 실제 하드웨어 의존  코드가 구현되어 있다. 하드웨어 독립적인 헤더 파일 portable.h는 컴파일 할 때 올바른 portmacro.h를 #include한다. FreeRTOS는 portmacro.h에 #define으로 선언되어 있는 하드웨어 종속 함수를 호출한다.

FreeRTOS가 하드웨어 종속 함수를 호출하는 방법을 한 번 보자. 하드웨어 독립적인 파일인 tasks.c는 종종 선점을 막기 위해 cretical section에 진입 할 필요가 있다. critical section진입 방법은 아키텍쳐 마다 다르고 하드웨어 독립적인 tasks.c는 하드웨어 종속적인 세부사항을 알고싶지 않다. 따라서 tasks.c는 전역 매크로인 portENTER_CRITICAL()을 호출하고, 어떻게 동작하는지는 기꺼이 모른체 한다. ARM Cortex-M3아키텍쳐와 IAR 컴파일러를 쓴다고 가정하면 FreeRTOS는 portENTER_CRITICAL()이 정의된 FreeRTOS/Source/portable/IAR/ARM_CM3/portmacro.h와 함께 빌드 된다. 다음과 같다.

~~~ {.c}
#define portENTER_CRITICAL()    vPortEnterCritical()
~~~

vPortEnterCritical()은 실제로 FreeRTOS/Source/portable/IAR/ARM_CM3/port.c에 정의되어 있다. port.c는 하드웨어 종속적이고 IAR 컴파일러와 Cortex-M3칩을 이해하는 코드를 포함하고 있다. vPortEnterCritical()은 하드웨어 종속적인 방법으로 critical section에 진입하고 하드웨어 독립적인 tasks.c로 리턴한다.

portmacro.h파일은 아키텍쳐의 기본 데이터 형식을 정의한다. IAR 컴파일러와 Cortex-M3칩의 경우 basic integer variables, pointers, the system timer tick data type이 다음과 같이 정의되어 있다.

~~~ {.c}
#define portBASE_TYPE  long              // Basic integer variable type
#define portSTACK_TYPE unsigned long     // Pointers to memory locations
typedef unsigned portLONG portTickType;  // The system timer tick type
~~~

이 #define을 이용한 데이터 형식과 함수의 얇은 계층은 복잡해 보이지만 이것은 하드웨어 종속 코드만 수정하고 재 컴파일하여 전혀 다른 시스템용 FreeRTOS를 만들어준다. 그리고 만약 현재 지원하지않는 아키텍쳐용 FreeRTOS를 제작할 경우, 하드웨어 종속적인부분에 비해 훨씬 작은 하드웨어 종속적인 부분만 구현하면 된다.

이상과 같이 FreeRTOS는 하드웨어 종속적인 부분을 C 전처리기 #define 매크로를 이용해 구현 한다. FreeRTOS는 #define을 많은 양의 하드웨어 독립적인 코드에 사용하기도 한다. 임베디드 시스템용이 아닌 어플리케이션에서는 이렇게 #define을 자주 사용하는것은 씻을 수 없는 죄악이지만 많은 소규모의 임베디드시스템에서는 함수 호출의 오버헤드가 더 큰 죄악이다.

# Scheduling Tasks: A Quick Overview
## Task Priorities and the Ready List

각 테스크는 

Each task has a user-assigned priority between 0 (the lowest priority) and the compile-time value of configMAX_PRIORITIES-1 (the highest priority). For instance, if configMAX_PRIORITIES is set to 5, then FreeRTOS will use 5 priority levels: 0 (lowest priority), 1, 2, 3, and 4 (highest priority).

FreeRTOS uses a "ready list" to keep track of all tasks that are currently ready to run. It implements the ready list as an array of task lists like this:

static xList pxReadyTasksLists[ configMAX_PRIORITIES ];  /* Prioritised ready tasks.  */
pxReadyTasksLists[0] is a list of all ready priority 0 tasks, pxReadyTasksLists[1] is a list of all ready priority 1 tasks, and so on, all the way up to pxReadyTasksLists[configMAX_PRIORITIES-1].
