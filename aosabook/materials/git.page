---
title: Git @ Aosabook
...

# Git

[텍스트](http://www.aosabook.org/en/git.html) 는 여기 있습니다.  

책을 읽고, 내용을 요약/정리하여 스터디원들에게 전달하기 위한 자료를 만듭니다. 이 페이지의 목적은  *git 이 다른 유사 프로그램들과 어떻게 다른가*, 몇몇 간단한 git 명령어를 사용할 때 *내부적으로 어떤 일이 일어나는가*를 당신이 **대충** 이해할 수 있는 쉬운 설명을 제공하는 것입니다. ... 짧게 말하자면 **쉬운 설명을 할 수 있을 정도로 내가 git을 잘 이해하기**가 목표입니다. 텍스트에서도 이야기하지만 git 의 커맨드는 정말 많고도 방대해서 완벽히 다 알려고 하는건 마치 C++ 을 정복하겠다는 정도로 부질없는 일입니다 ... 적당히 철학 및 설계를 이해하고, 자주 쓰는 명령부터 익혀가면 될 듯 합니다. 하지만 이 문서는 git 사용법에 대해 다루진 않습니다. 튜토리얼을 원하는 사람들이 ~~아마~~ 많을테니, 적절한 포탈을 앞에 배치하겠습니다. 귀찮으니 앞으로는 반말.

## Portals for git learners

  + [http://git-scm.com/book]()
  + [http://marklodato.github.com/visual-git-guide/index-en.html]()
  + [http://www.vogella.com/articles/Git/article.html]()
  + [http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html]()
  + [http://rogerdudler.github.com/git-guide/index.ko.html]()


## Git 이 뭐야?

여러 소스 코드 관리(SCM: Source Code Management) 시스템 중 하나이다. Subversion, CVS, Mercurial, Perforce 등 여러가지 비슷한 목적으로 만들어진 프로그램들이 있으며, 이들 사이에서는 구분되는 특징은

  1. 로컬 커밋이 가능
  2. 분산된 개발 흐름을 지원
  3. 저장소는 DAG 구조의 객체 데이터베이스
  4. 빠름
  5. 커맨드가 복잡함

정도가 있다.

## 이거 왜 만들었어?

### 태동

Git 이 리눅스 커널 커뮤니티에서 사용하기 위해 만들어졌다는 이야기는 개발자라면 거의 다 알고 있을만한 유명한 이야기다. 그런데 리눅스 커널은 당시의(그리고 지금도) 대부분의 소프트웨어 코드베이스와는 매우 다른 예외적인 경우에 속한다. 코드베이스에 커밋하는 커미터(Committer)도 많을 뿐더러, 패치를 보내오는 공헌자(Contributor)는 더 많고, 이 많은 사람들이 코드베이스에 대해 이해하고 있는 정도도 천차만별이다.

초기에 리눅스 커널은 많은 초보 개발자들이 쓰는 방법인, 1. 압축해두기 + 2. 변경사항 모아두기, 로 유지되어 왔으며, 이건 안되겠다 싶었던 커널 개발자들은 자신들에게 맞는 VCS(Version Control System)를 찾기 위해 고군분투했다. Git 은 이런 와중에 2005년에 시작된 오픈소스 프로젝트이다. Git 프로젝트가 시작될 당시 리눅스 커널은 BitKeeper 와 CVS 두개의 저장소에, 서로 다른 개발자의 손으로 관리되고 있었다. BitKeeper는 당시 다른 VCS 에서 제공되는 것과는 좀 다른 이력 보기 기능을 가지고 있었다. BitKeeper 를 만든 BitMover 가 커널 개발자들의 라이센스를 취소하겠다고 발표하자 리눅스의 아버지 *리누스 토발즈*가 후다닥 뭔가를 만들기 시작했는데, 이게 git 이 되었다.

### 목표

리누스가 처음 작성한 것은 스크립트 묶음이었는데, 이는 이메일로 날아오는 패치들을 순서대로 적용하는 일을 했다. 이 초기 스크립트 묶음의 목표는 여러 패치를 연속적으로 머지하는 작업을 빨리 할 수 있도록 하는 것이었다. 이 초기 결과물로부터 연결되는 git 의 디자인 목표는,

1. BitKeeper 가 보여주던 것과 유사한 분산 작업 흐름을 지원
2. 데이터 오류로부터 안전한 보호
3. 빠름

이렇게 3가지였고, 철학적으로는 anti CVS 를 지향했다. 참여자가 많고, 거대하고, 많은 작업 가지, 더 많은 패치를 다루어야 하는 커널 개발자가 원했던 것이 무엇인지 명확하게 확인할 수 있다. 비슷한 시기에 시작된 다른 **분산**VCS 들이 세개가 더 있는걸로 보아서, 목표 1번 **분산 작업 흐름을 지원** 은 인터넷의 발전으로 인한 시대의 요구였던게 아닐까 한다.

## VCS 의 기본

## Git 의 선택: The Toolkit

## Git internal

### 3단콤보 저장구조

### Object database

### 작업 가지(branch) & 가지잇기(merge)

